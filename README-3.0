-*- mode: outline -*-

Let's keep the goals really high-level (i.e., from the user's standpoint)
and not get into implementation details.

* Goals:

** non-write ops (creating package instances) shouldn't require root perms

  This means normal users should be able to build and inspect packages.
  Only installing should require special permissions.

  NOTE: Either write in a /tmp dir or parse through the tarball without extracting
        anywhere.  Or both.  I think we're already doing this...

** clean output handling

  SRP's output handling has historically been horrible, especially when
  redirecting output.  Debug statements in v1 and v2 were atrocious.  If we
  want to continue to support the ridiculous level of debug verbosity in v2,
  we should write it to a log file so it doesn't clutter the screen.

  NOTE: Using syslog might be a nice solution for some of this...

** Handle source package creation

  Users should be able to use srp to create an srp file.  Historically, you
  had to put them together using tar.

  This version should introduce the concept of assembling a source package,
  complete with dependency tracking (i.e., know when a rebuild is needed;
  Makfile-ish).

  NOTE: I think we were already doing this with the old v3 developmental
        tree.

** Add lots more SRP flags 

  SRP_PERLMOD
  SRP_GTK_ICONS
  SRP_GTK_THEMES
  SRP_USER
  SRP_SERVICE
  SRP_REVERT
  SRP_REPAIRABLE

** Repairable pacakges

  Keep package contents on file, not just checksums.  This way we can
  "repair" pacakges by reverting installed files to original contents.

  srp -m --repair installed_package [brp_if_needed]

** Re-checksum packages (i.e., install, tweek, rechecksum)

  srp -m --regen-checksums [installed_packagename | ALL]

** BRP checksums are generated at install-time

  This will allow us to modify the payload at install-time and have the
  checksums match up.  We can then add all these options:

  srp -i --strip-debug foo.brp
  srp -i --strip-translations foo.brp
  srp -i --strip-docs foo.brp foo.brp
  srp -i --strip-man foo.brp
  srp -i --strip-info foo.brp

** no more sub-packages (i.e., SRP_CHAIN)

  This feature was introduced in v2, and should be ditched.  It is my humble
  opinion that sub-packages are one of the things wrong with other package
  managers, and most distros in general.  They're overused and they end up
  confusing the unlucky end-user.  Either install something or don't.  Don't
  install half of it.  The occasional case where this is really desired
  (e.g., building latex docs for a package that you want to build before
  latex) can be worked around by having the would-be sub-package live as a
  standalone package.  Redundant copies of sources and other files can be
  eliminated by using Makefile targets to copy files around or something.

** not backwards compatible

  That's right, it's a feature.  Backwards compatibility just leads to nasty
  implementations with all kinds of legacy bloat.  This is a rewrite to be
  clean, fast, and small.  Don't weigh it down with old cruft.

** tool for converting NOTES files

  That being said, we should include a tool to generate new-style NOTES
  files from v2 ones.  It should be a standalone utility, though.  And it
  should generate some output regarding compatibility problems (e.g.,
  WARNING: old NOTES file uses SRP_PREPOSTLIB, you'll need to rewrite it for
  v3)

** no more PREPOSTLIBs

  These were useful, but their primary use turned out to be for hackish
  workarounds that should have really been fixed in SRP itself.  The libs that I
  used all over the place (i.e., for common tasks like adding users or services)
  should all get implemented in the core SRP code as Features.


* Implementation Goals

** clean, modular, object oriented design.

  Original v3 work was making too much use of metaclasses... and got pretty
  much derailed going crazy trying to implement protected member data via
  lots of decorators... should ditch that (i.e., don't base the internals of
  SRP on the internals of Python!)

** consistent usage of subprocess module

  This might just fix a lot of our old output issues, as I suspect a lot of
  them stem from redirecting output of a process that uses a mish-mash of
  os.system() and commands.getstatusoutput().  The subprocess module gives
  us a nice interface to traditional popen-style subprocess management,
  which is the right way to do it.

** add site-configurable distro string to BRP hosttype

  Old BRP hosttype is simply `uname -o`.`uname -m`.  Given the nature of
  what we're doing here, the first part of that is almost always "linux".
  Perhaps we should leave that as the default, but add the ability to change
  that first part via a config file.

  Or we could ditch the first part entirely.  Assuming that library and
  program inter-dependencies are tracked correctly, we shouldn't have to
  know what distro a package was compiled on.  Only the machine type is
  needed.  This info could also just be embedded in the package meta-data.

** SRP Feature API

  SRPFLAGs are implemented using the new SRP Feature API.  This will keep our
  codebase nice and neat and easy to extend w/ new features.

  Describe it here...

  The inter-feature-deps completely remove the need for special pre/post stages,
  as long as we can specify pre/post in the deps.

  TarInfo will be used for the pkg manifest, and it tracks file type (norm,
  link, symlink, etc), mode, size, and much more.  This means we no longer need
  special features for the old SRP_PERMS, SRP_LINKTARGET flags.  Will will need
  a separate checksum feature and a perms feature to replace the old
  SRP_OWNEROVERRIDE flag.

  defaults = [core,checksum,ldupdate]

  Should we dynamically gen no_* flags that strip the associated flag from a
  package's list of flags?


  core:
    create: create tar of NOTES, source, SHA
    build: run build script to create tar of payload
    install: untar payload, install tarinfo in ruckus/installed/pkgname/sha
    uninstall: remove files listed in pkg manifest
    action.commit: update pkg manifest

  checksum:
    install [before core]: gen sha of each file, update pkg manifest
    uninstall [before core]: verify, issue warning
    action.verify: gen sha of each file, compare with pkg manifest
    action.commit: update pkg manifest

  perms: (should we supply section name as arg?)
    install [before core, after user]: update tarinfo via perms section of NOTES file
    action.verify: check perms, issue warning

  user=user:group,user:group,...:
    install [before core]: create group and/or user accounts
    uninstall [core]: remove user/groups

  service=service1,service2,...:
    install [core]: register service (do not start)
    uninstall [before core]: unregister service

  perl_mod=:
    install [core]: register perl mod
    uninstall [before core?]: unregister perl mod

  latex_mod=:
    install [core]: register LaTeX mod
    uninstall [before core?]: unregister mod

  python_mod=:
    install [core]: register Python module
    uninstall [before core?]: unregister mod

  gtk_icons:
    install [core]: update gtk-icon-cache
    uninstall [core]: update gtk-icon-cache

  info=[path?]:
    install [core]: update info dir file
    uninstall [core]: update info dir file
    action:strip_info [strip_info]: update dir file

  ldupdate:
    install [core]: ldconfig
    uninstall [core]: ldconfig

  ldpath=[dir1,dir2,...]:
    install [before ldupdate]: update conf to include new dir(s)
    uninstall [before ldupdate]: remove dir(s) from conf

  repairable:
    install [core]: store BRP's blob along with pkg manifest
    action.repair: rerun install using blob and manifset

  strip_debug:
    install [before core, before checksum]: strip debug symbols from all files
    action.strip_debug: strip debug symbols from all files

  strip_docs:
    install [before core]: strip docs from tar (/*/share/docs)
    action.strip_docs: remove docs from installed fs and manifest

  strip_man:
    install [before core]: strip manpages from tar (/*/man, /*/share/man)
    action.strip_man: remove manpages from installed fs and manifest

  strip_info:
    install [before core]: strip info pages from tar (/*/info)
    action.strip_info [before info]: remove installed info, update manifest

  strip_translations:
    install [before core]: strip translation files from tar (*.po?)
    action.strip_translations: remove installed files, update manifest
