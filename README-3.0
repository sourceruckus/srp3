-*- mode: org; mode: flyspell -*-

Let's keep the goals really high-level (i.e., from the user's standpoint)
and not get into implementation details.

* Goals:

** non-write ops (creating package instances) shouldn't require root perms

  This means normal users should be able to build and inspect packages.
  Only installing should require special permissions.

** clean output handling

  SRP's output handling has historically been horrible, especially when
  redirecting output.  Debug statements in v1 and v2 were atrocious.  If we
  want to continue to support the ridiculous level of debug verbosity in v2,
  we should write it to a log file so it doesn't clutter the screen.

  NOTE: Using syslog might be a nice solution for some of this...

  NOTE: Using the logging module might be a good idea, too.

** No more source packages

  Odd sounding, I know.  Remove source packages from the Source Ruckus
  Packager?  Wasn't one of the original goals to actually distribute source
  packages and install directly from them, building implicitly?!?  Yeah, it
  was.  And it lead to lots of garbage duplicate code.  And that feature is
  hardly ever used (at least in my experience).  And it's slow.

  Additionally, the process of building a brp from an srp from a dist
  tarball is pretty limiting in 2015 where mostly everything is available
  via some distributed source control tool, which I happen to prefer to
  source tarballs for the most part.

  If you've already got an extracted source tree on disk, you shouldn't have
  to make a dist tarball and create a source package before you start
  building.

  So, will remove the entire concept of a "source package".  We will specify
  on the command line the path to "source" (which can be either a source
  tarball or a source tree) and handle things appropriately, building a brp
  directly from a NOTES file and source tree/archive.

  Example: srp -b foo.notes --src=/path/to/src

** Repairable pacakges (optionally)

  Keep package contents on file, not just checksums.  This way we can
  "repair" pacakges by reverting installed files to original contents.

  srp -m --repair installed_package [brp_if_needed]

** Re-checksum packages (i.e., install, tweek, rechecksum)

  srp -m --regen-checksums [installed_packagename | ALL]

** BRP checksums are generated at install-time

  This will allow us to modify the payload at install-time and have the
  checksums match up.  We can then add all these options:

  srp -i --strip-debug foo.brp
  srp -i --strip-translations foo.brp
  srp -i --strip-docs foo.brp foo.brp
  srp -i --strip-man foo.brp
  srp -i --strip-info foo.brp

** no more sub-packages (i.e., SRP_CHAIN)

  This feature was introduced in v2, and should be ditched.  It is my humble
  opinion that sub-packages are one of the things wrong with other package
  managers, and most distros in general.  They're overused and they end up
  confusing the unlucky end-user.  Either install something or don't.  Don't
  install half of it.  The occasional case where this is really desired
  (e.g., building latex docs for a package that you want to build before
  latex) can be worked around by having the would-be sub-package live as a
  standalone package.  Redundant copies of sources and other files can be
  eliminated by using Makefile targets to copy files around or something.

** not backwards compatible

  That's right, it's a feature.  Backwards compatibility just leads to nasty
  implementations with all kinds of legacy bloat.  This is a rewrite to be
  clean, fast, and small.  Don't weigh it down with old cruft.

** tool for converting NOTES files

  That being said, we should include a tool to generate new-style NOTES
  files from v2 ones.  It should be a standalone utility, though.  And it
  should generate some output regarding compatibility problems (e.g.,
  WARNING: old NOTES file uses SRP_PREPOSTLIB, you'll need to rewrite it for
  v3)

** no more PREPOSTLIBs

  These were useful, but their primary use turned out to be for hackish
  workarounds that should have really been fixed in SRP itself.  The libs that I
  used all over the place (i.e., for common tasks like adding users or services)
  should all get implemented in the core SRP code as Features (see below).

  We may need to have some very simple post func capability... but let's
  keep it as light-weight and simple as possible, if we need it at all.

** extensible Features API

  This is what we'll use instead of prepostlibs.  For example, the gtk
  package should install a python file to add a gtk-update-icon-cache
  feature that can be requested by packages that install icons.

  texinfo: install_info, strip_info
  systemd or sysvinit: service add/remove
  perl: perl_mod
  python: python_mod
  man: strip_man
  gettext: strip_translations
  texlive: latex_mod

** take full advantage of SMP

  Make absolutely sure that we're spreading our computational load out
  accross multiple processors as much as possible.  In theory, we should be
  I/O bound.  SRPv2, however, is definately not...

  NOTE: Will have to look into multiprocessing here, as multithreaded
        performance in Python is limited by the Global Interpreter Lock (GIL).

** be zoom zoom fast!

  We need to pay attention and keep our eyes open for unnecessary bottlenecks
  in the code.  Anything that turns out to be "too slow" simply because it's
  in Python should get re-implemented in C.

** srprc for user-specific configurables

  Read user info (e.g., name, email, overridden global prefs) from ~/.srprc,
  global config (e.g., compression algorithm, default features) from
  /etc/srp.conf.

** revamped documentation

  The existing info pages started out half-baked and became pretty outdated
  pretty quickly.  We should probably delete them and start over.

  Perhaps write a nice user manual in LaTeX?  Distribute as built PDF?

  Perhaps generate manpage via help2man?


* Implementation Goals

** update to Python 3

  Shouldn't be too hard, and is pretty much a no brainer.  I would like to
  use Python >= 3.3 so that I can depend on XZ compression (lzma module),
  subprocess.DEVNULL, and a few other things added in 3.3.

** clean, modular, straight forward design.

  Original v3 work was making too much use of metaclasses... and got pretty
  much derailed going crazy trying to implement protected member data via
  lots of decorators... should ditch that (i.e., don't base the internals of
  SRP on the internals of Python!)

** do things that can be done in python in python

  In other words, don't launch a subprocess to chown each file, use
  os.chown.  I suspect this is one of the key areas where SRPv2 was
  incurring crazy overhead.

** consistent usage of subprocess module (if at all!)

  This might just fix a lot of our old output issues, as I suspect a lot of
  them stem from redirecting output of a process that uses a mish-mash of
  os.system() and commands.getstatusoutput().  The subprocess module gives
  us a nice interface to traditional popen-style subprocess management,
  which is the right way to do it.

** add site-configurable distro string to BRP hosttype

  Old BRP hosttype is simply `uname -o`.`uname -m`.  Given the nature of
  what we're doing here, the first part of that is almost always "linux".
  Perhaps we should leave that as the default, but add the ability to change
  that first part via a config file.

  Or we could ditch the first part entirely.  Assuming that library and
  program inter-dependencies are tracked correctly, we shouldn't have to
  know what distro a package was compiled on.  Only the machine type is
  needed.  This info could also just be embedded in the package meta-data.

** SRP Feature API

  SRPFLAGs are implemented using the new SRP Feature API.  This will keep our
  codebase nice and neat and easy to extend w/ new features.

  Describe it here...

  The inter-feature-deps completely remove the need for special pre/post stages,
  as long as we can specify pre/post in the deps.

  TarInfo will be used for the pkg manifest, and it tracks file type (norm,
  link, symlink, etc), mode, size, and much more.  This means we no longer need
  special features for the old SRP_PERMS, SRP_LINKTARGET flags.  Will will need
  a separate checksum feature and a perms feature to replace the old
  SRP_OWNEROVERRIDE flag.

  defaults = [core,checksum,ldupdate,deps]

  Should we dynamically gen no_* flags that strip the associated flag from a
  package's list of flags?


  core:
    create: create tar of NOTES, source, SHA
    build: run build script, create initial tar of payload
    build_iter: add files to blob (maaaybe... not really async-able)
    install_iter: install each file
    install: install tarinfo in /var/lib/srp/pkgname/sha
    uninstall_iter: uninstall each file
    uninstall: remove pkg manifest
    action.commit: update pkg manifest

  perms:
    build_iter: update tarinfo via perms section of NOTES file
    action.verify: check perms, issue warning

  deps:
    build_iter: build list of needed libs by files in the payload
    install [before core]: verify all libs present on host system

  checksum:
    install_iter [after core]: gen sha of each file (can this dynamically update the manifest?)
    install: update pkg manifest
    uninstall_iter [before core]: verify, issue warning or error
    action.verify: gen sha of each file, compare with pkg manifest
    action.commit: update pkg manifest

  size:
    install_iter [after strip*]: record size of all files

  upgrade: (on by default, need to throw an error if no_upgrade but pkg
    already installed somewhere)
    install: handle removal of old package manifest, leftover files

  user=user:group,user:group,...:
    install [before core]: create group and/or user accounts
    uninstall [core]: remove user/groups

  ldupdate:
    install [core]: ldconfig
    uninstall [core]: ldconfig

  ldpath=[dir1,dir2,...]:
    install [before ldupdate]: update conf to include new dir(s)
    uninstall [before ldupdate]: remove dir(s) from conf

  repairable:
    install [core]: store BRP's blob along with pkg manifest
    action.repair: rerun install using blob and manifset

  strip_debug:
    install_iter [before checksum]: strip debug symbols from all files
    action.strip_debug: strip debug symbols from all files

  strip_docs:
    install [before core]: strip docs from tar (/*/share/docs)
    action.strip_docs: remove docs from installed fs and manifest



The following are probably extensions (to be supplied by different
packages):

  service=service1,service2,...:
    install [core]: register service (do not start)
    uninstall [before core]: unregister service

  perl_mod=:
    install [core]: register perl mod
    uninstall [before core?]: unregister perl mod

  latex_mod=:
    install [core]: register LaTeX mod
    uninstall [before core?]: unregister mod

  python_mod=:
    install [core]: register Python module
    uninstall [before core?]: unregister mod

  gtk_icons:
    install [core]: update gtk-icon-cache
    uninstall [core]: update gtk-icon-cache

  info=[path?]:
    install [core]: update info dir file
    uninstall [core]: update info dir file
    action:strip_info [strip_info]: update dir file

  strip_man:
    install_iter [before core]: strip manpages from tar (/*/man, /*/share/man)
    action.strip_man: remove manpages from installed fs and manifest

  strip_info:
    install_iter [before core]: strip info pages from tar (/*/info)
    action.strip_info [before info]: remove installed info, update manifest

  strip_translations:
    install_iter [before core]: strip translation files from tar (*.po?)
    action.strip_translations: remove installed files, update manifest
