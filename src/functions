# -*- mode: sh -*-

# !!!!!!!!!!!!!!! super important compatability warning of doom !!!!!!!!!!!!!!!
#
# The Source Ruckus bootstrap-stage2 scripts run using busybox's ash shell (at
# least until bash is installed).  That means there are a few bash-isms that we
# MUST avoid using.  It also runs using the busybox versions of the GNU
# userspace (e.g., sed, awk, grep), which may not have identical usage.
#
# Things to avoid:
#
# - No += support, so OPTS+=' --foo' has to be OPTS="$OPTS --foo".
#
# - Don't use shopt for special options (e.g., nullglob, dotglob), unless it's
#   to DISABLE a default bash-ism (e.g., command hashing), in which case you
#   must check the $BASH variable.
#
# - Can't use {} globbing (e.g., cp foo{,orig})
#
# - Cannot trap ERR.  The kernel's link-vmlinux.sh uses this (called during
#   mrproper)...
#
# Things that are still OK:
#
# - $() subshell expansion
# - wc -l usage
# - sed -i usage
# - cp, mv, rm, mkdir, rmdir, ln now support -v for verbose output
# - pushd/popd are made available here
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


# these variables will be used by default to determine the number of jobs to
# pass into make.
#
export CPUCOUNT=$(grep "^processor" /proc/cpuinfo | wc -l)
export JOBCOUNT=$((CPUCOUNT+1))
export JOBCOUNT_KBUILD=$((CPUCOUNT*4))

# turn off bash's hash function.  we don't want bash caching PATH lookups
# while we're installing things all over the place...
#
# NOTE: This is a bash-only issue documented in the CLFS books.  The stage2
#       builder at least starts out using ash, which doesn't support hashing at
#       all (from what I can tell).  Later during the build, bash may start
#       getting used (after it gets installed), so we still need this
#       conditionally set.
#
if [ -n "$BASH" ]; then
    set +h
fi

# make sure we have pushd/popd, since we use it all over the place
#
# NOTE: these two aliases are only set if a check for pushd fails.
need_pushd=0
pushd / >/dev/null 2>&1 && popd >/dev/null || need_pushd=1
if [ $need_pushd -eq 1 ]; then
    alias pushd='wd="$(pwd) ${wd}" && cd'
    alias popd='cd ${wd%% *} && wd=${wd#* }'
else
    # make bash's pushd/popd be quiet
    alias pushd='pushd >/dev/null'
    alias popd='popd >/dev/null'
fi


# most packages probably aren't this simple... but some might be!  args are
# passed into configure.
#
build_generic()
{
    setup_generic generic &&
    configure_generic $* &&
    compile_generic || exit 1
}


# FIXME: wait... can i make one of these that does BUILD32/BUILD64 logic?
#
# FIXME: maaaaybe... but the 2nd pass will need to change libdir... maybe
#        require =prefix= to be set in environment so we can figure out what to
#        set --libdir to for the 2nd pass?
#
#        how about =pass2= must specify additional configure flags?
#
#        ex:  pass2="--libdir=/usr/lib64" build_multi --prefix=/usr \
#                 --with-bogeys --enable-foo || exit 1
#
# FIXME: should we replace build_generic with this autodetecting multi-pass
#        build script?  only do 2nd pass if pass2 and BUILD32 are set?
#
# NOTE: Depends on the following variables:
#
#       BUILD32
#       BUILD64
#       CLFS_TARGET32
#
build_multi()
{
    # ========== pass1 ==========
    setup_generic pass1 || exit 1

    OPTS=$*

    if [ -n "$pass2" ] && [ -n "$BUILD32" ]; then
        # x86_64 multilib, 1st pass cross-compiles for 32bit
        OPTS="$OPTS --host=${CLFS_TARGET32}"
    fi

    # NOTE: CLFS only specifies CC and CXX during the 32bit portion of a
    #       multilib build, but it essentially expands to a no-op in the other
    #       configs, so we just let it.
    #
    export CC="gcc ${BUILD32}"
    export CXX="g++ ${BUILD32}"
    configure_generic $OPTS &&
    unset CC CXX &&
    compile_generic || exit 1

    # ========== pass2 ==========
    if [ -n "$pass2" ] && [ -n "$BUILD32" ]; then
        # 2nd pass of multilib build
        #
        # FIXME: this doesn't work for lib/lib32 does it... just lib/lib64?
        #

        setup_generic pass2 || exit1

        OPTS="$* $pass2"

        export CC="gcc ${BUILD64}"
        export CXX="g++ ${BUILD64}"
        configure_generic $OPTS &&
        unset CC CXX &&
        compile_generic || exit 1
    fi
}


# Takes a =build_id= as arg, creates a builddir for it.  Will use =SOURCE_DIR=
# for out-of-tree building by default.  Sets the following variables in the
# environment:
#
#   =sourcedir= - The directory the sources live in.  By default, same as
#     =SOURCE_DIR=, but may be different if =checkout=, =copy=, or =patches=
#     variables are set.  See Options.
#
#   =builddir= - The working directory of the build.  By default, this is a
#     seperate directory for out-of-tree building.  Will be the same as
#     =sourcedir= (or a symlink to it) if =build_in_tree= variable is set.
#
#   =configure= - The absolute path to the configure script.
#
# Options:
#
#   =checkout= - Specifying checkout=tagname will cause a new source dir to be
#     checked out using the specified tagname.  =SOURCE_DIR= must be a git
#     repo.  The =source= variable will get set to the freshly cloned tree.
#     The package's build_script is responsible for bootstrapping the cloned
#     source tree, if needed.
#
#   =copy= - The =SOURCE_DIR= will get copied into a new directory.  The
#     =source= variable will get set to the new directory.
#
#   =build_in_tree= - The build will happen directly in the source tree.  Some
#     packages do not support out-of-tree building (or have buggy automake
#     files) and must be built in-tree.  If specified w/ an external sourcetree
#     but w/out either =copy= or =checkout=, =copy= mode will be implicitly
#     enabled.
#
#   =patches= - The =SOURCE_DIR= will get copied and the supplied list of
#     patches will be applied.  The patches must be specified with absolute
#     paths, but shell globs can be used.  If specified w/ an external
#     sourcetree but w/out either =copy= or =checkout=, =copy= mode will be
#     implicitly enabled.
#
#   =use_configure= - The specified script will be used instead of the default
#     =configure=.  This is for packages (e.g., perl) that have a configure.gnu
#     script, but could otherwise use all the generic functions.
#
#
# NOTE: Unlike the setup_generic in the Source Ruckus boostrap builder, this
#       function gets executed AFTER the source tarball has been extracted (if
#       one was specified).
#
setup_generic()
{
    build_id=$1
    shift
    # defaults
    builddir=$BUILD_DIR/$build_id
    sourcedir=$SOURCE_DIR

    # allow user to override the name of the configure script
    #
    # NOTE: Added this specifically for perl, which uses configure.gnu
    [ -n "$use_configure" ] || use_configure="configure"

    # check for use of an external source tree combined with things that will
    # modify its contents
    #
    # NOTE: This is for the odd case where the user supplies a path to some
    #       external source tree along with a list of patches.  We don't want
    #       to patch a source tree that isn't under our control, so we enable
    #       =copy= mode.  Similarly, we don't want to build in-tree in an
    #       external source tree.
    #
    # NOTE: We detect an "external sourcetree" by checking to see if
    #       =SOURCE_DIR= was rooted inside our temporary working dir (i.e.,
    #       tarball was extracted by srp)
    #
    internal_sourcetree=$(echo $SOURCE_DIR | grep "^$(dirname $PAYLOAD_DIR)")
    if [ -z "$copy" ] && [ -z "$checkout" ]; then
        # don't bother the user with these messages if =copy= or =checkout=
        # were explictly specified
        if [ -z "$internal_sourcetree" ]; then
            if [ -n "$patches" ]; then
                echo "NOTE: using copy of external sourcetree for patching."
                copy=1
            elif [ -n "$build_in_tree" ]; then
                echo "NOTE: using copy of external sourcetree for in-tree" \
                    "building."
                copy=1
            fi
        fi
    fi

    # check for sourcedir modifiers
    if [ -n "$copy" ]; then
        sourcedir=$BUILD_DIR/../source-$build_id
        echo "copying source tree from $SOURCE_DIR to $sourcedir..."
        cp -a $SOURCE_DIR $sourcedir || exit 1

        # fix relative paths in copied .git file(s)
        find $sourcedir -name .git -exec \
            sed -i "s|^gitdir: [./]*|gitdir: $SOURCE_DIR/.|" {} \;

    elif [ -n "$checkout" ]; then
        sourcedir=$SOURCE_DIR-$build_id
        echo -n "creating local checkout of $checkout from $SOURCE_DIR in" \
            "$sourcedir..."
        git clone --shared --branch $checkout $SOURCE_DIR $sourcedir || exit 1

    fi

    if [ -n "$build_in_tree" ]; then
        builddir=$sourcedir
    fi

    # apply additional patches, if specified
    if [ -n "$patches" ]; then
        pushd $sourcedir || exit 1
        for p in $patches; do
            echo "applying additional patch: $p"
            patch -Np1 < $p || exit 1
        done
        popd
    fi

    configure="$sourcedir/$use_configure"
    unset use_configure

    # NOTE: The Source Ruckus bootsrap builder would auto-bootstrap cloned
    #       source trees here via autoreconf_generic.  I chose not to include
    #       that method here, because it's handled in core.py and I didn't want
    #       confusing duplicate code... but that means if you use =checkout=,
    #       you need to bootstrap within the build_script after calling
    #       setup_generic (i.e., you cannot use build_generic w/ =checkout=).

    mkdir -p $builddir

    echo sourcedir: $sourcedir
    echo builddir:  $builddir
    echo configure: $configure
}


# Depends on the variables set by setup_generic.  either run that, or set them
# yourself.
#
# All args are passed into configure.
#
configure_generic()
{
    pushd $builddir &&
    $configure $* &&
    popd || exit 1
}


# Depends on the variables set by setup_generic.  either run that, or set them
# yourself.
#
compile_generic()
{
    pushd $builddir &&
    make -j$JOBCOUNT && make DESTDIR=$PAYLOAD_DIR install &&
    popd || exit 1
}
